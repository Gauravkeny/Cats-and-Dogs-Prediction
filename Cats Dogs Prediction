# Import Important Libraries

import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator # This library reads the image data

train_datagen = ImageDataGenerator(
        rescale=1./255,   # Scale the data
        shear_range=0.2,  
        zoom_range=0.2,
        horizontal_flip=True)
        
train_set = train_datagen.flow_from_directory( # It takes image data from our directory
        'dataset/training_set',    # Path where Data is Stored
        target_size=(64, 64),      # Resolution
        batch_size=32,             # No of Training Data Utilized in 1 itteration
        class_mode='binary')       # Here our class mode is Binary wheteher it is a cat or a dog
        
test_datagen = ImageDataGenerator(rescale=1./255) # now we should not do anything on our test data

tets_set = test_datagen.flow_from_directory(
        'dataset/test_set',
        target_size=(64, 64),
        batch_size=32,
        class_mode='binary')

cnn = tf.keras.models.Sequential()

cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64,64,3])) # First we need to do covolution 
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2)) # then we should pool our Data
cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu')) # Again add 2nd layer of Convolution
cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2)) # Add 2nd Layer of Maxpool
cnn.add(tf.keras.layers.Flatten()) # Now to convert our Pooling and Convolutional Data into array
cnn.add(tf.keras.layers.Dense(units=128, activation='relu')) # First Hidden Layer
cnn.add(tf.keras.layers.Dense(units=1, activation='sigmoid')) # Final Output
cnn.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'] # Compiler for our cnn
cnn.fit(x = train_set, validation_data = tets_set, epochs = 25) # Fit the model

import numpy as np
from keras.preprocessing import image # to get the image
test_image = image.load_img(path,target_size = [64,64]) # Resolution

test_image = image.img_to_array(test_image)

import numpy as np # Import numpy
from keras.preprocessing import image  # import image viewer
test_image = image.load_img('path.jpg', # path to our test image
     target_size= [64,64])
test_image = image.img_to_array(test_image) # convert our image to arrray
test_image = np.expand_dims(test_image, axis = 0) # 
result = cnn.predict(test_image)
train_set.class_indices
if result [0][0]:
  prediction = 'dog'
else:
  prediction = 'cat'

print(prediction)






